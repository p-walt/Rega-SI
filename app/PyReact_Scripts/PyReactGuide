==========================
PyReact script
v0.5
Copyright (c) 2017-2021 Kristaps Ermanis
Distributed under GNU GPLv3 license

Please cite as:
PyReact v0.5, K. Ermanis, Nottingham, 2021
==========================


This script automates the preparation of Gaussian input files for a wide variety of situations,
as well as local running, and submission to the Augusta cluster, job monitoring and automated
downloading of job files after completion.

The geometry can be provided as either an SDF file or as a Gaussian output (*.out) from a previous
calculation.

The script is written in a fairly modular way, so that adapting to new HPC systems should be
fairly straightforward, but of course would require some familiarity with Python programming,
ssh, bash scripting and HPC queueing systems.


BASIC USE:

cd into the directory containing the input geometries and run the PyReact like this:
/path/to/PyReact/PyReact.py -d a --nProc 4 --TimeLimit 2 test1.sdf test2.sdf test3.sdf

There is no limit on how many geometry files are provided, input files and submission scripts for
all will be generated and submitted

-d switch select where to run the job - 'g' means Gaussian locally, 'a' means Augusta.

--nProc selects how many parallel processors to use for each job, this adjusts both the submission
script and the Gaussian directives

--TimeLimit selects the time limit to provide in the SLURM submission script

Other important switches:
-F can be used to select functional, default is 'B3LYP'
-B can be used to select the basis set, default is '6-31G**'
--OptCycles selects the maximum number of geometry optimization cycles, default is 50
-s selects the solvent; as with other options, this needs to be in form that Gaussian understands

--constr '1,2,1.4' - this can be used to constrain internal coordinates in Gaussian. In this case,
the distance between atom 1 and atom 2 will be constrained to 1.4 angstroms.

--scan '1,2;1.1,1.2,1.3,1.4' - this can be used to scan a coordinate. Importantly, these jobs are
not submitted as Gaussian scan jobs, but as a completely separate constrained Gaussian jobs and
launched in parallel.

--Resub 2    - this will automatically resubmit geometry optimization specified number of times,
if it doesn't converge the first time around.

--KeepChk  - the script deletes the checkpoint files by default
There are many other options that I've added over time, a full list can be seen from
/path/to/PyReact/PyReact.py -h

--SubmitOnly    - job monitoring and automatic downloading requires a stable connection to the
University internal network, so probably would work for desktop PCs physically in the department,
but less so for laptops on wifi or the VPN. This switch will make the script to exit after job
submission, leaving the downloading of finished job results will then be up to the user.


REQUIREMENTS AND INSTALLATION:

The script requires Linux OS, Python 3.6 or later, and OpenBabel with Python bindings.
Anaconda Python distribution is highly recommended, as makes installation of OpenBabel
much less painful.
(see https://anaconda.org/conda-forge/openbabel)

The script also requires a passwordless ssh connection to Augusta. A guide to setting this
up can be found here:
http://www.linuxproblem.org/art_9.html

Finally, minor modification of GaussianAugusta.py file in the script folder is required.
Specifically, user needs to changed from 'pczke' to your username on Augusta.
Also, hostname may need to be changed from 'augusta' to whatever you use with ssh command
to ssh into the HPC system.



